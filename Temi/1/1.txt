1. Дайте пример за конзолна програма, която чете от конзолата страна и височина на триъгълник, въведени от потребителя, и пресмята 
   неговото лице. Използвайте формулата за лице на триъгълник: area = a * h / 2. Закръглете резултата до 2 знака след десетичната точка.

   Примерен вход и изход:
   вход		иход
   20		Triangle area = 300
   30

   15		Triangle area = 262.5
   35

   7.75		Triangle area = 32.74
   8.45
   
2. Дайте пример за конзолна програма, която чете цяло число, въведено от потребителя, и печата дали е четно ("even") или нечетно ("odd").

3. Посочете кое твърдение е вярно за променливите?
  Изберете едно или повече:
   a. Всяка една променлива в C# си има тип и име.  - ПРАВИЛНО
   b. Имената на променливите могат да започват с числа. - 
   c. Променливата е място, на което пазим информация. - ПРАВИЛНО
   d. Имената на променливите могат да бъдат служебни думи. -  
   e. Не може да има две променливи с едно и също име.  - ПРАВИЛНО

4. Напишете метод на C#, който отпечатва на конзолата квадрат от звездички с размери nхn. Квадратът трябва да изглежда по следният начин:
   * * * * * * * * * *
   * * * * * * * * * *
   * * * * * * * * * *
   * * * * * * * * * *
   * * * * * * * * * *
   * * * * * * * * * *
   * * * * * * * * * *
   * * * * * * * * * *
   * * * * * * * * * *
   * * * * * * * * * *
   
   public void PrintSquare(int n)
        {
            for (int i = 1; i <= n; i++)
            {
                for (int j = 1; j <= n; j++)
                {
                    Console.Write("* ");
                }
                Console.WriteLine();
            }
        }
      
      
5. Посочете кои езици за програмиране работят с компилатор, кои с интерпретатор?
   
  Език за програмиране	компилатор/интерпретатор
   Python	[с интерпретатор]
   PHP	[с интерпретатор]
   C++	[с компилатор]
   C#	[с компилатор]
   Java [с компилатор]
   JavaScript 	[с интерпретатор]
   
   
6. Пример: По време на теоретичния изпит се предоставя непълен/неработещ/некоректен програмен фрагмент. Предоставеният фрагмент да се приведе в работещ вид.

Условие: Разполагате със следния програмен код:

Program.cs

 int n = int.Parse(Console.ReadLine());              
            int d3 = 0; 
            int d5 = 0; 

            for (int i = 0; i < n; i--) 
            {
                int number = Console.ReadLine();
                if (number % 2 == 0) 
                {
                    d2++; 
                
                if (number % 3 == 0) 
                {
                    d3++ 
                }
                if (number / 5 == 0) 
                {
                    d5++; 
                }
            }

            Console.WriteLine(d2); 
            Console.WriteLine(d3); 
            Console.WriteLine(d5); 

 

Открийте и поправете грешките във вече написания програмен код, така че да се реши поставената по-долу задача. Допълнете кода.

Деление без остатък

Дадени са n-на брой цели числа в интервала [1…1000]. От тях някакъв брой се делят без остатък на 2, друг брой се делят без остатък на 3, друг брой се делят без остатък на 5. Да се напише програма, която изчислява и отпечатва броя на числата във всяка група.

Пример: имаме n = 10 числа: 680, 2, 600, 200, 800, 799, 199, 46, 128, 65. Получаваме следното разпределение и визуализация:

Деление              Числа в диапазона                  Брой числа
без остатък:
 2                   680,2,600,200,800,46,128               7
 3                   600                                    1
 5                   680,600,200,800,65                     5
 
 Вход

На първия ред от входа стои цялото число n (1 ≤ n ≤ 1000) - брой числа. На следващите n реда стои по едно цяло число в интервала [1…1000] - числата които да бъдат проверени на колко се делят.

Изход

Да се отпечатат на конзолата 3 реда:

На първият ред – брой на числата които се делят на 2
На вторият ред - брой на числата които се делят на 3
На третият ред - брой на числата които се делят на 4

Примерен вход и изход

Вход    Изход        Вход     Изход
10        7            3        1
          1                     3
680       5            3        0
2                      6
600                    9
200
800
799
199
46
128
65

/*
         КЛЮЧ
        int n = int.Parse(Console.ReadLine()); 
            int d2 = 0; //2Т
            int d3 = 0; 
            int d5 = 0; 

            for (int i = 0; i < n; i++) //2Т
            {
                int number = int.Parse(Console.ReadLine());//2Т
                if (number % 2 == 0) 
                {
                    d2++; 
                }//1Т
                if (number % 3 == 0) 
                {
                    d3++; //1Т
                }
                if (number % 5 == 0) //2Т
                {
                    d5++; 
                }
            }

            Console.WriteLine(d2); 
            Console.WriteLine(d3); 
            Console.WriteLine(d5);
         */
         
         
7. По време на теоретичния изпит се предоставя непълен/неработещ/некоректен програмен фрагмент. Предоставеният фрагмент да се приведе в работещ вид.

Идентифицирайте правилно и поправете грешките в написания програмен код, така че да решите поставената задача. Допълнете кода, ако и когато това е необходимо.

 

Условие: Разполагате със следния програмен код:

Program.cs

static void Main(string[] args)
        {
            string sector = Console.ReadLine()
            int row = int.Parse(Console.ReadLine());
            int col = int.Parse(Console.ReadLine()); 

            switch ()
            { 
                case "Sector A":
                    totalSum = GetTotalProfit(row, col, 11.60); 
                    
                case "Sector B":
                    totalSum = GetTotalProfit(row, col, 14.50)
                    break;
                case "Sector C": 
                    totalSum = GetTotalProfit(row, col, 16.10); 
                    break;
                case "Sector D"
                    totalSum = GetTotalProfit(row, col, 8.40);
                    break;
            
            Console.WriteLine($"{sector} profit is {totalSum:f2} lv.");
        }
        static double GetTotalProfit(int row, int col, double price)
        {
            return row * col * price;
        }

 

Открийте и поправете грешките във вече написания програмен код, така че да се реши поставената по-долу задача. Допълнете кода.

1.   Футболен мач

На един стадион има определен брой сектори, в които има седалки наредени в правоъгълна форма и има X реда и Y седалки на ред.

Има четири вида сектори с билети на различни цени:

Sector A  –  цена на билета 11.60 лева
Sector B  –  цена на билета 14.50 лева
Sector C  –  цена на билета 16.10 лева
Sector D – цена на билета 8.40 лева
Напишете програма, която изчислява приходите за даден сектор, ако са разпродадени всички билети, като знаете кой е секторът, какъв е броят редове в него и броят седалки на ред.

Изчислението на приходите трябва да го осъществите с помощта на метод GetTotalProfit, който приема като параметри точно в дадената последователност: реда, колоната и цената на билета. 

Вход:

Входът се чете от конзолата и съдържа точно 3 реда:

На първия ред - сектор - текст с възможности: Sector A, Sector B, Sector C, Sector D
На втория ред - брой редове - цяло число в интервала [1... 1000]
На третия ред -  брой седалки на ред - цяло число в интервала [1... 1000]

Изход

Да се отпечата на конзолата един ред:

   "{сектор} profit is {печалба} lv."

Печалбата да бъде форматирана до втория знак след десетичната запетая.

Примерен вход и изход
Вход                    Изход                                          Обяснение
Sector A                                                         Цена за билет в сектор А: 11.60
12             Sector A profit is 41760.00lv                     Общ брой седалки: 12*300=3600
300                                                              Печалба: 3600*11.60=4170

Вход                    Изход                                          Обяснение
Sector B                                                         Цена за билет в сектор B: 14.50
40             Sector B profit is 69600.00lv                     Общ брой седалки: 40*120=4800
120                                                              Печалба: 4800*14.50=69600

Вход                    Изход                                          Обяснение
Sector C                                                         Цена за билет в сектор C: 16.10
10             Sector C profit is 27370.00lv                     Общ брой седалки: 10*170=1700
170                                                              Печалба: 1700*16.10=27370

Вход                    Изход                                          Обяснение
Sector D                                                         Цена за билет в сектор D: 8.40
20            Sector D profit is 100800.00lv                     Общ брой седалки: 20*600=12000
600                                                              Печалба: 12000*8.40=100800

/*
         КЛЮЧ
        static void Main(string[] args)
        {
            string sector = Console.ReadLine(); //1Т
            int row = int.Parse(Console.ReadLine());
            int col = int.Parse(Console.ReadLine()); 
            double totalSum = 0;//2Т

            switch (sector)//2Т
            { 
                case "Sector A":
                    totalSum = GetTotalProfit(row, col, 11.60); 
                    break; //2Т
                case "Sector B":
                    totalSum = GetTotalProfit(row, col, 14.50);//1Т
                    break;
                case "Sector C": 
                    totalSum = GetTotalProfit(row, col, 16.10); 
                    break;
                case "Sector D"://1Т
                    totalSum = GetTotalProfit(row, col, 8.40);
                    break;
            }//1Т
            Console.WriteLine($"{sector} profit is {totalSum:f2} lv.");
        }
        static double GetTotalProfit(int row, int col, double price)
        {
            return row * col * price;
        }
         */
         
         
8. Даден е следният програмен код на C#. Открийте какъв ще бъде резултатът от изпълнението на програмата. В полето запишете очакваният резултат и защо се е получил този резултат?

string color = "red";
if(color == "red")
      Console.WriteLine("tomato")
else if(color == "yellow")
      Console.WriteLine("banana")
      Console.WriteLine("lemon")
      
tomato lemon. Когато имаме само една команда в тялото на if конструкцията, можем да пропуснем къдравите скоби, обозначаващи тялото на условния оператор. Когато искаме да изпълним блок от код (група команди), къдравите скоби са задължителни. В случай че ги изпуснем, ще се изпълни само първият ред след if клаузата.


9. 
Интерпретаторът има за задача в [РЕАЛНО ВРЕМЕ] да преведе код, написан на високо ниво (най-често на динамичен език) до [МАШИНЕН КОД] или код за виртуална машина.

Интерпретаторът е "[ПРОГРАМА] за изпълняване на програми", написани на някакъв програмен език. Той изпълнява командите на програмата [ ЕДНА СЛЕД ДРУГА], като разбира не само от единични команди и поредици от команди, но и от другите езикови конструкции (проверки, повторения, функции и т.н.).

Езици, които работят с интерпретатор се изпълняват без да се компилират. Поради липса на предварителна [КОМПИЛАЦИЯ], при [ИНТЕРПРЕТЕРУЕМИТЕ ] езици грешките се откриват [ПО ВРЕМЕ НА ИЗШЪЛНЕНИЕ], след като програмата започне да работи, а не [ПРЕДВАРИТЕЛНО].


10. Открийте начините, по които се стартира проект във VisualStudio среда.

С бутона за стартиране HelloWorld
С клавишната комбинация Ctrl + F5


11. Посочете коя среда за разработка на кой програмен език съответства?
   За програмиране на езика C#:	Visual Studio
 
   За програмиране на езика Python:	PyCharm
 
   За програмиране на езика Java:  IntelliJ IDEA
   
12. Дефинирайте понятието for цикъл в C#. Опишете декларацията на for цикъл който преминава последователно през числата от 1 до 10 и ги отпечатва. Опишете конструкцията на for цикълa, декларация, стъпки, цел и тяло на цикъла. 


for (int i = 1; i <= 10; i++)
{
      Console.WriteLine(i);
}


Цикълът започва с оператора for и преминава през всички стойности за дадена променлива в даден интервал, например всички числа от 1 до 10 включително, и за всяка стойност изпълнява поредица от команди.

В декларацията на цикъла може да се зададе начална стойност (i = 1) и крайна стойност (i <= 10). Тялото на цикъла обикновено се огражда с къдрави скоби { } и представлява блок с една или няколко команди. 

Целта на цикъла е да се премине последователно през числата 1, 2, 3, …, n и за всяко от тях да се изпълни някакво действие. 

В примера по-горе променливата i приема стойности от 1 до 10 и в тялото на цикъла се отпечатва текущата стойност. Цикълът се повтаря 10 пъти и всяко от тези повторения се нарича "итерация".

13. 
Пример: По време на теоретичния изпит се предоставя непълен/неработещ/некоректен програмен фрагмент. Предоставеният фрагмент да се приведе в работещ вид.

 

Условие: Разполагате със следния програмен код:

Program.cs

int number = int.Parse(Console.ReadLine()); 
            int firstDigit = number / 100; 
            int secondDigit = (number / 100) % 10; 
            int thirdDigit = number % 100; 
            int rows = firstDigit + secondDigit; 
            int cols = firstDigit + thirdDigit; 

            for (int row = 0; row < rows; row--) 
            {
                for (int col = 0; col > cols; col++)
                {
                    if (number % 5 == 0) 
                    {
                        number -= firstDigit;
                    }
                    if (number % 3 == 0) 
                    {
                        number = secondDigit;
                    }
                    else
                    {
                        number += thirdDigit; 
                    }
                    Console.Write($"{number} "); 
                } 

                Console.WriteLine(); 
            }

 

Открийте и поправете грешките във вече написания програмен код, така че да се реши поставената по-долу задача. Допълнете кода.

 

Цифри

Като вход на програмата, се прочита от конзолата 1 цяло трицифрено число. Трябва да принтирате числото определен брой пъти, като всеки път, преди да се принтира, числото се модифицира по следния начин:

·       ако числото се дели на 5 без остатък, извадете от него първата му цифра,

·       ако числото се дели на 3 без остатък, извадете от него втората му цифра,

·       ако не е нито едно от горните – прибавете към него третата му цифра,

Принтирайте на конзолата N на брой реда, като всеки ред има М на брой числа, които са резултат от горните действия. Редовете са равни на сбора на първата и втората цифра на числото, а колоните – на първата и третата цифра.

Вход

Входът е цяло число в интервала [100…999].
Изход

Да се отпечатат на конзолата всички цели числа, които са резултат от дадените по-горе изчисления в съответния брой редове и колони, както в примерите.

Примерен вход и изход

Вход         Изход                     Обяснения
132       129 126 123                  (1+3)=4 и (1+2)=3 -> 4 реда по 3 числа на всеки ред
          120 119 121                  Входното число 132
          123 120 119                  132 -> деление на 3 -> 132-3=
                                       =129 -> деление на 3 -> 129-3=
                                       =126 -> деление на 3 -> 126-3=
                                       =123 -> деление на 3 -> 123-3=
                                       =120 -> деление на 5 -> 120-1=
                                       ...121 -> нито 5, нито 3 -> 121+2=123
                                       
Вход         Изход                     Обяснения
376    382 388 394 400 397 403 409 415 412   (1+3)=4 и (1+2)=3 -> 4 реда по 3 числа на всеки ред
                        Входното число 132
          123 120 119                  132 -> деление на 3 -> 132-3=
                                       =129 -> деление на 3 -> 129-3=
                                       =126 -> деление на 3 -> 126-3=
                                       =123 -> деление на 3 -> 123-3=
                                       =120 -> деление на 5 -> 120-1=
                                       ...121 -> нито 5, нито 3 -> 121+2=123
          121 123 120
